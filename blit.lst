Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 23:50:26
blit.asm						     Page 1 - 1


				; #########################################################################
				;
				;   blit.asm - Assembly file for EECS205 Assignment 2
				;   Jacob Kobza
				;   February 3rd, 2014
				; #########################################################################
				; This program writes the colors specified onto the bitmap to create a blit on the screen

				      .586
				      .MODEL FLAT,STDCALL
				      .STACK 4096
				      option casemap :none  ; case sensitive

				    include blit.inc		; Take a look at this file to understand how
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
 00000010		      C _EECS205BITMAP STRUCT
 00000000  00000000	      C  dwWidth      DWORD  ?
 00000004  00000000	      C  dwHeight     DWORD  ?
 00000008  00		      C  bTransparent BYTE   ?
 00000009  00000003 [	      C               BYTE   3 DUP(?)
	    00
	   ]
 0000000C  00000000	      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
								;      bitmaps are declared

 00000000			.DATA

 00000000 00000000		currRow DWORD ?	         ;contains the current row number to write to in the bitmap. A counter that controls the outer loop
 00000004 00000000		bitmapAddress DWORD ?    ;contains the address of the next color byte in the bitmap to read from memory
 00000008 00000000		storeecx DWORD ?         ;temporarily contains the value that was in ecx while it is needed to perform other computations
 0000000C 00000000		xcoord DWORD ?           ;stores the current x coordinate

 00000000			.CODE

				; Routine which draws a bitmap to the screen
 00000000			BlitReg PROC 

 00000000  8B DA		mov ebx, edx
 00000002  C7 05 00000000 R	mov currRow, 0
	   00000000
 0000000C  8B 43 0C		mov eax, (EECS205BITMAP PTR [ebx]).lpBytes
 0000000F  A3 00000004 R	mov bitmapAddress, eax

 00000014  8B 13		mov edx, (EECS205BITMAP PTR [ebx]).dwWidth
 00000016  D1 EA		shr edx, 1                       ;edx <- dwWidth / 2
 00000018  2B F2		sub esi, edx                     ;esi <- Address for (x - dwWidth / 2, y)
 0000001A  89 35 0000000C R	mov xcoord, esi

 00000020  8B 53 04		mov edx, (EECS205BITMAP PTR [ebx]).dwHeight
 00000023  D1 EA		shr edx, 1                       ;edx <- dwHeight / 2
 00000025  2B FA		sub edi, edx                     ;edi <- Address for (x, y - dwHeight / 2)

				;this loop goes through each row of the bitmap
 00000027			RowLoop:
					;each time through the row loop, the pixel in the specified location is drawn and the row is increased
					;this is the outer loop of the nested loops
 00000027  8B 0D 0000000C R		mov ecx, xcoord
 0000002D  29 0D 0000000C R		sub xcoord, ecx
 00000033  2B C9			sub ecx, ecx
					
 00000035  A1 00000000 E		mov eax, dwPitch
 0000003A  F7 E7			mul edi
 0000003C  03 C6			add eax, esi
 0000003E  03 05 00000000 E		add eax, lpDisplayBits

				;this loop goes through each column of the bitmap
 00000044			ColumnLoop:
					;each time through the column loop, the pixel in the specified location is drawn and the column is increased
 00000044  89 0D 00000008 R		mov storeecx, ecx
 0000004A  8B 0D 00000004 R		mov ecx, bitmapAddress
 00000050  8A 09			mov cl, BYTE PTR[ecx]
					;check for transparency
 00000052  3A 4B 08			cmp cl, (EECS205BITMAP PTR [ebx]).bTransparent
 00000055  74 24			je Skip
					;checks for boundaries
 00000057  81 FF 000001DF		cmp edi, 479
 0000005D  7F 1C			jg Skip
 0000005F  83 FF 00			cmp edi, 0
 00000062  7C 17			jl Skip
 00000064  81 3D 0000000C R		cmp xcoord, 639
	   0000027F
 0000006E  7F 0B			jg Skip
 00000070  83 3D 0000000C R		cmp xcoord, 0
	   00
 00000077  7C 02			jl Skip
 00000079  88 08			mov BYTE PTR [eax], cl ;this line writes a pixel to the screen at address eax
				;Skip is a jump destination for when the pixel shouldn't be drawn
 0000007B			Skip:
 0000007B  8B 0D 00000008 R		mov ecx, storeecx
					;the column counters are incremented
 00000081  83 05 00000004 R		add bitmapAddress, 1
	   01
 00000088  83 C0 01			add eax, 1
 0000008B  83 C1 01			add ecx, 1
 0000008E  83 05 0000000C R		add xcoord, 1
	   01
					
					;check for the condition of the inner loop
					;if satisfied it goes to the next column
 00000095  3B 0B			cmp ecx, (EECS205BITMAP PTR [ebx]).dwWidth
 00000097  7C AB			jl ColumnLoop
					
					;the row counters are incremented
 00000099  83 05 00000000 R		add currRow, 1
	   01
 000000A0  83 C7 01			add edi, 1
 000000A3  A1 00000000 R		mov eax, currRow
					;check for the condition of the outer loop
					;if satisfied it goes to the next row
 000000A8  3B 43 04			cmp eax, (EECS205BITMAP PTR [ebx]).dwHeight
 000000AB  0F 8C FFFFFF76		jl RowLoop

				    ;; Here is some C-like pseudocode. You can use this as a starting point
				    ;; 	 (or start from scratch if you feel like it)

				    ;; Feel free to declare variables (global) if it helps. There is a pretty
				    ;;   good chance that you won't fit everything in registers

				    ;; 	for(bmpY = 0;  bmpY < srcBitmap->dwHeight; bmpY++)
				    ;;         	for(bmpX = 0;  bmpX < srcBitmap->dwWidth; bmpX++) {
				    ;; 		        screenX = centerX + bmpX - srcBitmap->dwWidth/2;
				    ;; 		        screenY = centerY + bmpY - srcBitmap->dwHeight/2;
				    ;; 	
				    ;; 			if (srcBitmap->lpBytes[bmpY*srcBitmap->dwWidth+bmpX] == srcBitmap->bTransparent &&
				    ;; 			    screenX >= 0 && screenX <= 639 &&
				    ;; 			    screenY >= 0 && screenY <= 479)
				    ;; 				lpDisplayBits[screenY*dwPitch + screenX] =
				    ;; 					srcBitmap->lpBytes[bmpY*srcBitmap->dwWidth+bmpX]; 
				    ;; 				
				    ;; 		}
				    	
				    
 000000B1  C3			    ret             ;; Don't delete this line
				    ; cosa = FixedCos(angle) 
				; sina = FixedSin(angle) 
				; esi = lpBitmap 
				; shiftX = (EECS205BITMAP PTR [esi]).dwWidth * cosa / 2 ­
				;      (EECS205BITMAP PTR [esi]).dwHeight * sina / 2;
				; shiftY = (EECS205BITMAP PTR [esi]).dwHeight * cosa / 2 +
				;      (EECS205BITMAP PTR [esi]).dwWidth * sina / 2;
				; dstWidth= (EECS205BITMAP PTR [esi]).dwWidth + 
				; (EECS205BITMAP PTR [esi]).dwHeight; 
				; dstHeight= dstWidth; 
				; for(dstX = ­dstWidth; dstX < dstWidth; dstX++)   { 
				;   for(dstY = ­dstHeight; dstY < dstHeight; dstY++) { 
				; srcX = dstX*cosa + dstY*sina; 
				; srcY = dstY*cosa – dstX*sina; 
				; if (srcX >= 0 && srcX < (EECS205BITMAP PTR [esi]).dwWidth && 
				;             srcY >= 0 && srcY < (EECS205BITMAP PTR [esi]).dwHeight && 
				;             (xcenter+dstX­shiftX) >= 0 && (xcenter+dstX­shiftX) < 639 && 
				;             (ycenter+dstY­shiftY) >= 0 && (ycenter+dstY­shiftY) < 479 && 
				;             bitmap pixel (srcX,srcY) is not transparent) then
				;           Copy color value from bitmap (srcX, srcY) 
				; to screen (xcenter+dstX­shiftX, ycenter+dstY­shiftX) 
				;       } 
				;   } 
				; }

 000000B2			BlitReg ENDP


 00000010			.DATA
						
 00000010 00000020		StarBitmap EECS205BITMAP <32, 36, 0ffh,, offset StarBitmap + sizeof StarBitmap>
	   00000024 FF
	   00000003 [
	    00
	   ] 00000020 R
 00000020  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FE
 00000030  FE FF FF FF FF		BYTE 0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000040  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FE
 00000050  FE FE FF FF FF		BYTE 0feh,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000060  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0fdh
	   FF FF FF FF FF
	   FF FF FF FF FE
	   FD
 00000070  F9 F9 FF FF FF		BYTE 0f9h,0f9h,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000080  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0fdh
	   FF FF FF FF FF
	   FF FF FF FF FE
	   FD
 00000090  F8 F8 FD FF FF		BYTE 0f8h,0f8h,0fdh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 000000A0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0fdh
	   FF FF FF FF FF
	   FF FF FF FF FE
	   FD
 000000B0  F8 F8 F8 FE FF		BYTE 0f8h,0f8h,0f8h,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 000000C0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0fdh
	   FF FF FF FF FF
	   FF FF FF FE FE
	   FD
 000000D0  F8 F8 D8 F9 FF		BYTE 0f8h,0f8h,0d8h,0f9h,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 000000E0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0f9h
	   FF FF FF FF FF
	   FF FF FF FE FE
	   F9
 000000F0  F8 F8 D8 D8 FE		BYTE 0f8h,0f8h,0d8h,0d8h,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000100  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0fdh,0f8h
	   FF FF FF FF FF
	   FF FF FF FE FD
	   F8
 00000110  F8 F4 F8 D8 D9		BYTE 0f8h,0f4h,0f8h,0d8h,0d9h,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000120  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0feh,0fdh,0f8h
	   FF FF FF FF FF
	   FF FF FA FE FD
	   F8
 00000130  F8 F4 F8 D8 D8		BYTE 0f8h,0f4h,0f8h,0d8h,0d8h,0fdh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FD FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000140  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0fdh,0f8h
	   FF FF FF FF FF
	   FF FF FE FE FD
	   F8
 00000150  F4 F4 F4 F8 F8		BYTE 0f4h,0f4h,0f4h,0f8h,0f8h,0d4h,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   D4 FE FF FF FF
	   FF FF FF FF FF
	   FF
 00000160  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0feh,0f9h,0d4h
	   FF FF FF FF FF
	   FF FE FE FE F9
	   D4
 00000170  F8 F4 F4 D4 F8		BYTE 0f8h,0f4h,0f4h,0d4h,0f8h,0f8h,0d4h,0feh,0feh,0feh,0feh,0feh,0feh,0feh,0ffh,0ffh
	   F8 D4 FE FE FE
	   FE FE FE FE FF
	   FF
 00000180  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0f9h,0fdh,0f8h,0f8h
	   FF FF FF FF FF
	   FE FE F9 FD F8
	   F8
 00000190  F4 F8 F4 F4 F8		BYTE 0f4h,0f8h,0f4h,0f4h,0f8h,0d4h,0d4h,0f8h,0d9h,0d9h,0d9h,0f9h,0d9h,0f9h,0d9h,0fah
	   D4 D4 F8 D9 D9
	   D9 F9 D9 F9 D9
	   FA
 000001A0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0fdh,0f9h,0f8h,0f8h,0f8h,0f8h
	   FF FF FF FE FE
	   FD F9 F8 F8 F8
	   F8
 000001B0  F8 D4 F8 F8 F4		BYTE 0f8h,0d4h,0f8h,0f8h,0f4h,0f8h,0f8h,0d8h,0f8h,0f8h,0f8h,0f8h,0d8h,0d4h,0d5h,0feh
	   F8 F8 D8 F8 F8
	   F8 F8 D8 D4 D5
	   FE
 000001C0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0feh,0f9h,0f9h,0f8h,0f8h,0fch,0fch,0f8h,0f8h
	   FE FE FE F9 F9
	   F8 F8 FC FC F8
	   F8
 000001D0  F8 F8 F8 F8 F4		BYTE 0f8h,0f8h,0f8h,0f8h,0f4h,0f8h,0b0h,0d8h,0d8h,0f8h,0f8h,0f4h,0f8h,0d8h,0d9h,0feh
	   F8 B0 D8 D8 F8
	   F8 F4 F8 D8 D9
	   FE
 000001E0  FF FF FE FD F9		BYTE 0ffh,0ffh,0feh,0fdh,0f9h,0f8h,0f8h,0f8h,0f8h,0f8h,0fdh,0fdh,0f8h,0f8h,0f8h,0f8h
	   F8 F8 F8 F8 F8
	   FD FD F8 F8 F8
	   F8
 000001F0  F8 B0 D8 F8 F8		BYTE 0f8h,0b0h,0d8h,0f8h,0f8h,0f8h,044h,08ch,0d4h,0d8h,0d4h,0d4h,0d4h,0d4h,0feh,0ffh
	   F8 44 8C D4 D8
	   D4 D4 D4 D4 FE
	   FF
 00000200  FE FE D9 D8 F8		BYTE 0feh,0feh,0d9h,0d8h,0f8h,0f8h,0fch,0fch,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0fch
	   F8 FC FC F8 F8
	   F8 F8 F8 F8 F8
	   FC
 00000210  F8 6C 6C FC F8		BYTE 0f8h,06ch,06ch,0fch,0f8h,0d8h,06ch,06ch,0d4h,0f8h,0d4h,0d4h,0d4h,0d5h,0ffh,0ffh
	   D8 6C 6C D4 F8
	   D4 D4 D4 D5 FF
	   FF
 00000220  FF DA D4 D4 F8		BYTE 0ffh,0dah,0d4h,0d4h,0f8h,0f8h,0f8h,0f8h,0f4h,0f4h,0f4h,0f8h,0f8h,0f8h,0fch,0fch
	   F8 F8 F8 F4 F4
	   F4 F8 F8 F8 FC
	   FC
 00000230  FD 6C 6C FD FC		BYTE 0fdh,06ch,06ch,0fdh,0fch,0d8h,048h,068h,0f8h,0d4h,0d4h,0d4h,0d4h,0feh,0ffh,0ffh
	   D8 48 68 F8 D4
	   D4 D4 D4 FE FF
	   FF
 00000240  FF FF FE D8 D4		BYTE 0ffh,0ffh,0feh,0d8h,0d4h,0f4h,0f8h,0f4h,0f4h,0f4h,0f8h,0f8h,0f8h,0f8h,0fch,0fch
	   F4 F8 F4 F4 F4
	   F8 F8 F8 F8 FC
	   FC
 00000250  FD 48 48 FD FC		BYTE 0fdh,048h,048h,0fdh,0fch,0fch,044h,024h,0f8h,0d4h,0d4h,0d4h,0d9h,0ffh,0ffh,0ffh
	   FC 44 24 F8 D4
	   D4 D4 D9 FF FF
	   FF
 00000260  FF FF FF FE F9		BYTE 0ffh,0ffh,0ffh,0feh,0f9h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   F8 F8 F8 F8 F8
	   F8 F8 F8 FC FC
	   FC
 00000270  FD 48 00 FD FC		BYTE 0fdh,048h,000h,0fdh,0fch,0f8h,048h,024h,0f8h,0f4h,0d4h,0d5h,0ffh,0ffh,0ffh,0ffh
	   F8 48 24 F8 F4
	   D4 D5 FF FF FF
	   FF
 00000280  FF FF FF FF FE		BYTE 0ffh,0ffh,0ffh,0ffh,0feh,0f9h,0f8h,0f8h,0d8h,0f8h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   F9 F8 F8 D8 F8
	   F8 F8 F8 FC FC
	   FC
 00000290  FC 6C 20 F8 FC		BYTE 0fch,06ch,020h,0f8h,0fch,0fch,090h,044h,0f8h,0f4h,0d4h,0fah,0ffh,0ffh,0ffh,0ffh
	   FC 90 44 F8 F4
	   D4 FA FF FF FF
	   FF
 000002A0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fdh,0f9h,0d8h,0d8h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   FF FD F9 D8 D8
	   F8 F8 F8 FC FC
	   FC
 000002B0  FC B4 20 FD FC		BYTE 0fch,0b4h,020h,0fdh,0fch,0fch,0d8h,0d8h,0f8h,0f4h,0d5h,0feh,0ffh,0ffh,0ffh,0ffh
	   FC D8 D8 F8 F4
	   D5 FE FF FF FF
	   FF
 000002C0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f9h,0d8h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   FF FF FE F9 D8
	   F8 F8 F8 FC FC
	   FC
 000002D0  FC FC FC FC FC		BYTE 0fch,0fch,0fch,0fch,0fch,0fch,0f8h,0d8h,0f8h,0f4h,0d5h,0feh,0ffh,0ffh,0ffh,0ffh
	   FC F8 D8 F8 F4
	   D5 FE FF FF FF
	   FF
 000002E0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f9h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   FF FF FF FE F9
	   F8 F8 F8 FC FC
	   FC
 000002F0  FC FC FC FC FC		BYTE 0fch,0fch,0fch,0fch,0fch,0fch,0fch,0d8h,0f8h,0d4h,0d4h,0feh,0ffh,0ffh,0ffh,0ffh
	   FC FC D8 F8 D4
	   D4 FE FF FF FF
	   FF
 00000300  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f8h,0f8h,0f8h,0f8h,0fch,0fch
	   FF FF FF FF FE
	   F8 F8 F8 F8 FC
	   FC
 00000310  FC FC FC FC FC		BYTE 0fch,0fch,0fch,0fch,0fch,0f8h,0f8h,0d8h,0f8h,0d4h,0d4h,0feh,0ffh,0ffh,0ffh,0ffh
	   F8 F8 D8 F8 D4
	   D4 FE FF FF FF
	   FF
 00000320  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f8h,0f8h,0f8h,0f8h,0f8h,0fch
	   FF FF FF FF FE
	   F8 F8 F8 F8 F8
	   FC
 00000330  FC FC FC FC F8		BYTE 0fch,0fch,0fch,0fch,0f8h,0f8h,0f8h,0d8h,0d4h,0d4h,0d4h,0feh,0ffh,0ffh,0ffh,0ffh
	   F8 F8 D8 D4 D4
	   D4 FE FF FF FF
	   FF
 00000340  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h
	   FF FF FF FF FE
	   F8 F8 F8 F8 F8
	   F8
 00000350  F8 FC F8 F8 F8		BYTE 0f8h,0fch,0f8h,0f8h,0f8h,0f8h,0d8h,0f8h,0f4h,0d4h,0d4h,0f9h,0ffh,0ffh,0ffh,0ffh
	   F8 D8 F8 F4 D4
	   D4 F9 FF FF FF
	   FF
 00000360  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f8h,0f8h,0f4h,0f8h,0f8h,0f8h
	   FF FF FF FF FE
	   F8 F8 F4 F8 F8
	   F8
 00000370  F8 F8 F8 F8 F8		BYTE 0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0d4h,0d4h,0d4h,0f4h,0f9h,0ffh,0ffh,0ffh,0ffh
	   F8 F8 D4 D4 D4
	   F4 F9 FF FF FF
	   FF
 00000380  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0f8h,0f4h,0f4h,0f8h,0f8h,0f8h
	   FF FF FF FF FA
	   F8 F4 F4 F8 F8
	   F8
 00000390  F8 F8 F8 F8 D4		BYTE 0f8h,0f8h,0f8h,0f8h,0d4h,0d4h,0d4h,0d4h,0d4h,0d4h,0d4h,0d5h,0ffh,0ffh,0ffh,0ffh
	   D4 D4 D4 D4 D4
	   D4 D5 FF FF FF
	   FF
 000003A0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0f8h,0f4h,0f4h,0f4h,0f4h,0d4h
	   FF FF FF FF FA
	   F8 F4 F4 F4 F4
	   D4
 000003B0  D4 D8 D4 F9 F9		BYTE 0d4h,0d8h,0d4h,0f9h,0f9h,0d5h,0b0h,0d4h,0d4h,0d4h,0d4h,0d4h,0ffh,0ffh,0ffh,0ffh
	   D5 B0 D4 D4 D4
	   D4 D4 FF FF FF
	   FF
 000003C0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0f9h,0f8h,0f4h,0f4h,0f4h,0d4h,0d4h
	   FF FF FF FF F9
	   F8 F4 F4 F4 D4
	   D4
 000003D0  D8 D4 FE FF FF		BYTE 0d8h,0d4h,0feh,0ffh,0ffh,0ffh,0feh,0d5h,0d5h,0d4h,0d4h,0d5h,0ffh,0ffh,0ffh,0ffh
	   FF FE D5 D5 D4
	   D4 D5 FF FF FF
	   FF
 000003E0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0f9h,0f8h,0f4h,0f4h,0f4h,0d4h,0d8h
	   FF FF FF FF F9
	   F8 F4 F4 F4 D4
	   D8
 000003F0  D5 FE FF FF FF		BYTE 0d5h,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0d5h,0b5h,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FA
	   D5 B5 FF FF FF
	   FF
 00000400  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0f9h,0f4h,0f4h,0f4h,0d4h,0d4h,0f9h
	   FF FF FF FF F9
	   F4 F4 F4 D4 D4
	   F9
 00000410  FE FF FF FF FF		BYTE 0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000420  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0d9h,0d8h,0d4h,0d4h,0d5h,0fah,0ffh
	   FF FF FF FF D9
	   D8 D4 D4 D5 FA
	   FF
 00000430  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000440  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0d4h,0d4h,0d5h,0feh,0ffh,0ffh
	   FF FF FF FF FA
	   D4 D4 D5 FE FF
	   FF
 00000450  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000460  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0dah,0d5h,0d4h,0feh,0ffh,0ffh,0ffh
	   FF FF FF FF DA
	   D5 D4 FE FF FF
	   FF
 00000470  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000480  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f9h,0feh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FE
	   F9 FE FF FF FF
	   FF
 00000490  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
						

				END

Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 23:50:26
blit.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

_EECS205BITMAP . . . . . . . . .	 00000010
  dwWidth  . . . . . . . . . . .	 00000000	 DWord
  dwHeight . . . . . . . . . . .	 00000004	 DWord
  bTransparent . . . . . . . . .	 00000008	 Byte
  lpBytes  . . . . . . . . . . .	 0000000C	 DWord


Types:

                N a m e                  Size     Attr

EECS205BITMAP  . . . . . . . . .	 00000010     _EECS205BITMAP 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004A0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000B2 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BlitReg  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B2 Public STDCALL
  RowLoop  . . . . . . . . . . .	L Near	 00000027 _TEXT	
  ColumnLoop . . . . . . . . . .	L Near	 00000044 _TEXT	
  Skip . . . . . . . . . . . . .	L Near	 0000007B _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
StarBitmap . . . . . . . . . . .	_EECS205BITMAP  00000010 _DATA	Public STDCALL
bitmapAddress  . . . . . . . . .	DWord	 00000004 _DATA	
currRow  . . . . . . . . . . . .	DWord	 00000000 _DATA	
dwPitch  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
lpDisplayBits  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
storeecx . . . . . . . . . . . .	DWord	 00000008 _DATA	
xcoord . . . . . . . . . . . . .	DWord	 0000000C _DATA	

	   0 Warnings
	   0 Errors
