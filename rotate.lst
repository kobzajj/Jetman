Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 23:50:26
rotate.asm						     Page 1 - 1


				; #########################################################################
				;
				;   rotate.asm - Assembly file for EECS205 Assignment 3
				;	Jacob Kobza, 2/14/14
				;
				;
				; #########################################################################

				      .586
				      .MODEL FLAT,STDCALL
				      .STACK 4096
				      option casemap :none  ; case sensitive

				    include trig.inc		; Useful prototypes
			      C ; #########################################################################
			      C ;
			      C ;   trig.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C ;; FIXED is a fixed point number (16 bit integer and 16 bit fractional components)
			      C ;;    To convert a FIXED value in eax into an integer:  sar eax, 16
			      C ;;    To convert an integer value in eax into a FIXED:  shl eax, 16
			      C FIXED TYPEDEF DWORD
			      C 
			      C EXTERNDEF SINTAB:WORD 
			      C 
			      C FixedSin PROTO STDCALL dwAngle:FIXED 
			      C FixedCos PROTO STDCALL dwAngle:FIXED
			      C 
			      C 
			      C 
			      C 
			      C 
				    include rotate.inc		; 	and definitions
			      C ; #########################################################################
			      C ;
			      C ;   rotate.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C include blit.inc
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
 00000010		      C _EECS205BITMAP STRUCT
 00000000  00000000	      C  dwWidth      DWORD  ?
 00000004  00000000	      C  dwHeight     DWORD  ?
 00000008  00		      C  bTransparent BYTE   ?
 00000009  00000003 [	      C               BYTE   3 DUP(?)
	    00
	   ]
 0000000C  00000000	      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
			      C 
			      C BasicBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD
			      C 
			      C RotateBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD, angle:DWORD
			      C 
			      C 
			      C 


 00000000			.DATA
					;; You may declare helper variables here, but it would probably be better to use local variables

 00000000			.CODE

				;this function calls the BlitReg function in blit.asm using stack-passed parameters
 00000000			BasicBlit PROC USES esi ebx ecx edx lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD
 00000007  8B 75 0C		mov esi, xcenter
 0000000A  8B 7D 10		mov edi, ycenter
 0000000D  8B 55 08		mov edx, lpBmp
 00000010  E8 00000000 E	call BlitReg

				ret

 0000001D			BasicBlit ENDP

				;-------------------------------------------------------------------------------------------------------------------------------

				;this function creates an image that rotates using the arrow keys
 0000001D			RotateBlit PROC lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD, angle:DWORD
				LOCAL sina:FIXED, cosa:FIXED, shiftX:DWORD, shiftY:DWORD, dstWidth:DWORD, dstHeight:DWORD, 
				dstX:DWORD, dstY:DWORD, srcX:DWORD, srcY:DWORD, writeCoordX:DWORD, writeCoordY:DWORD, bitmapval:BYTE

				;initialize local variables
 00000023  C7 45 F4		mov shiftX, 0
	   00000000
 0000002A  C7 45 F0		mov shiftY, 0
	   00000000
 00000031  C7 45 EC		mov dstWidth, 0
	   00000000

				;call the fixed cos and sin functions to get the trig values
				INVOKE FixedSin, angle
 00000040  89 45 FC		mov sina, eax
				INVOKE FixedCos, angle
 0000004B  89 45 F8		mov cosa, eax

				;moves the address of the bitmap into a register
 0000004E  8B 75 08		mov esi, lpBmp

				;use the sine and cosine values to calculate vertical and horizontal shifts
 00000051  8B 5D FC		mov ebx, sina
 00000054  8B 4D F8		mov ecx, cosa
 00000057  8B 06		mov eax, (EECS205BITMAP PTR [esi]).dwWidth
 00000059  89 45 EC		mov dstWidth, eax
 0000005C  F7 E9		imul ecx
 0000005E  C1 F8 11		sar eax, 17
 00000061  89 45 F4		mov shiftX, eax
 00000064  8B 46 04		mov eax, (EECS205BITMAP PTR [esi]).dwHeight
 00000067  01 45 EC		add dstWidth, eax
 0000006A  8B 55 EC		mov edx, dstWidth
 0000006D  89 55 E8		mov dstHeight, edx
 00000070  F7 EB		imul ebx
 00000072  C1 F8 11		sar eax, 17
 00000075  29 45 F4		sub shiftX, eax
 00000078  8B 06		mov eax, (EECS205BITMAP PTR [esi]).dwWidth
 0000007A  F7 EB		imul ebx
 0000007C  C1 F8 11		sar eax, 17
 0000007F  89 45 F0		mov shiftY, eax
 00000082  8B 46 04		mov eax, (EECS205BITMAP PTR [esi]).dwHeight
 00000085  F7 E9		imul ecx
 00000087  C1 F8 11		sar eax, 17
 0000008A  01 45 F0		add shiftY, eax

				;set dstX to -dstWidth and dstY to -dstHeight to start loop
 0000008D  8B 45 EC		mov eax, dstWidth
 00000090  89 45 E4		mov dstX, eax
 00000093  29 45 E4		sub dstX, eax
 00000096  29 45 E4		sub dstX, eax
 00000099  8B 45 E8		mov eax, dstHeight
 0000009C  89 45 E0		mov dstY, eax
 0000009F  29 45 E0		sub dstY, eax
 000000A2  29 45 E0		sub dstY, eax

				;returns here when to write to a new row (x-value)
 000000A5			XLoop:
 000000A5  8B 45 E8			mov eax, dstHeight
 000000A8  89 45 E0			mov dstY, eax
 000000AB  29 45 E0			sub dstY, eax
 000000AE  29 45 E0			sub dstY, eax
					
				;returns here to write to a new column (y-value)
 000000B1			YLoop:
					;find the x-coordinate srcX in the bitmap
 000000B1  8B 45 F8			mov eax, cosa
 000000B4  F7 6D E4			imul dstX
 000000B7  C1 F8 10			sar eax, 16
 000000BA  89 45 DC			mov srcX, eax
 000000BD  8B 45 FC			mov eax, sina
 000000C0  F7 6D E0			imul dstY
 000000C3  C1 F8 10			sar eax, 16
 000000C6  01 45 DC			add srcX, eax
					
					;find the y-coordinate srcY in the bitmap
 000000C9  8B 45 F8			mov eax, cosa
 000000CC  F7 6D E0			imul dstY
 000000CF  C1 F8 10			sar eax, 16
 000000D2  89 45 D8			mov srcY, eax
 000000D5  8B 45 FC			mov eax, sina
 000000D8  F7 6D E4			imul dstX
 000000DB  C1 F8 10			sar eax, 16
 000000DE  29 45 D8			sub srcY, eax
					
					;check the boundary conditions of the bitmap
 000000E1  83 7D DC 00			cmp srcX, 0
 000000E5  7C 7B			jl skip
 000000E7  8B 06			mov eax, (EECS205BITMAP PTR [esi]).dwWidth
 000000E9  39 45 DC			cmp srcX, eax
 000000EC  7D 74			jge skip
 000000EE  83 7D D8 00			cmp srcY, 0
 000000F2  7C 6E			jl skip
 000000F4  8B 46 04			mov eax, (EECS205BITMAP PTR [esi]).dwHeight
 000000F7  39 45 D8			cmp srcY, eax
 000000FA  7D 66			jge skip
					
					;calculate the write coordinates (writeCoordX, writeCoordY)
					;for writing to the screen
 000000FC  8B 45 0C			mov eax, xcenter
 000000FF  03 45 E4			add eax, dstX
 00000102  2B 45 F4			sub eax, shiftX
 00000105  89 45 D4			mov writeCoordX, eax
 00000108  8B 45 10			mov eax, ycenter
 0000010B  03 45 E0			add eax, dstY
 0000010E  2B 45 F0			sub eax, shiftY
 00000111  89 45 D0			mov writeCoordY, eax
					
					;check the boundary conditions for the screen
 00000114  83 7D D4 00			cmp writeCoordX, 0
 00000118  7C 48			jl skip
 0000011A  81 7D D4			cmp writeCoordX, 639
	   0000027F
 00000121  7F 3F			jg skip
 00000123  83 7D D0 00			cmp writeCoordY, 0
 00000127  7C 39			jl skip
 00000129  81 7D D0			cmp writeCoordY, 479
	   000001DF
 00000130  7F 30			jg skip
					
					;find the color value from the specified point in the bitmap
					;stored in dl (lowest byte in edx)
 00000132  8B 06			mov eax, (EECS205BITMAP PTR [esi]).dwWidth
 00000134  F7 65 D8			mul srcY
 00000137  03 46 0C			add eax, (EECS205BITMAP PTR [esi]).lpBytes
 0000013A  03 45 DC			add eax, srcX
 0000013D  2B D2			sub edx, edx
 0000013F  8A 10			mov dl, BYTE PTR [eax]
 00000141  88 55 CF			mov bitmapval, dl
					
					;check for transparency
 00000144  3A 56 08			cmp dl, (EECS205BITMAP PTR [esi]).bTransparent
 00000147  74 19			je skip
					
					;write the color specified into the specified coordinate on the screen
 00000149  8B 45 D0			mov eax, writeCoordY
 0000014C  F7 25 00000000 E		mul dwPitch
 00000152  03 05 00000000 E		add eax, lpDisplayBits
 00000158  03 45 D4			add eax, writeCoordX
 0000015B  2B D2			sub edx, edx
 0000015D  8A 55 CF			mov dl, bitmapval
 00000160  88 10			mov BYTE PTR [eax], dl
					
				;jump to skip the write if boundary conditions aren't met
 00000162			skip:
					
					;increment Y counter and return to YLoop
 00000162  83 45 E0 01			add dstY, 1
 00000166  8B 45 E0			mov eax, dstY
 00000169  3B 45 E8			cmp eax, dstHeight
 0000016C  0F 8C FFFFFF3F		jl YLoop
					
					;increment X counter and return to XLoop
 00000172  83 45 E4 01			add dstX, 1
 00000176  8B 45 E4			mov eax, dstX
 00000179  3B 45 EC			cmp eax, dstWidth
 0000017C  0F 8C FFFFFF23		jl XLoop
					
				ret

 00000186			RotateBlit ENDP

				;----------------------------------------------------------------------------------------------------------------------------------

				;This is the pseudocode for the rotateblit function written above.
				; cosa = FixedCos(angle) 
				; sina = FixedSin(angle) 
				; esi = lpBitmap 
				; shiftX = (EECS205BITMAP PTR [esi]).dwWidth * cosa / 2 ­
				;      (EECS205BITMAP PTR [esi]).dwHeight * sina / 2;
				; shiftY = (EECS205BITMAP PTR [esi]).dwHeight * cosa / 2 +
				;      (EECS205BITMAP PTR [esi]).dwWidth * sina / 2;
				; dstWidth= (EECS205BITMAP PTR [esi]).dwWidth + 
				; (EECS205BITMAP PTR [esi]).dwHeight; 
				; dstHeight= dstWidth; 
				; for(dstX = ­dstWidth; dstX < dstWidth; dstX++)   { 
				;   for(dstY = ­dstHeight; dstY < dstHeight; dstY++) { 
				; srcX = dstX*cosa + dstY*sina; 
				; srcY = dstY*cosa – dstX*sina; 
				; if (srcX >= 0 && srcX < (EECS205BITMAP PTR [esi]).dwWidth && 
				;             srcY >= 0 && srcY < (EECS205BITMAP PTR [esi]).dwHeight && 
				;             (xcenter+dstX­shiftX) >= 0 && (xcenter+dstX­shiftX) < 639 && 
				;             (ycenter+dstY­shiftY) >= 0 && (ycenter+dstY­shiftY) < 479 && 
				;             bitmap pixel (srcX,srcY) is not transparent) then
				;           Copy color value from bitmap (srcX, srcY) 
				; to screen (xcenter+dstX­shiftX, ycenter+dstY­shiftX) 
				;       } 
				;   } 
				; }

				;; Define the functions BasicBlit and RotateBlit
				;; Take a look at rotate.inc for the correct prototypes (if you don't follow these precisely, you'll get errors)
				;; Since we have thoroughly covered defining functions in class, its up to you from here on out...
				;; Remember to include the 'ret' instruction or your program will hang
						

				END
Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 23:50:26
rotate.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

_EECS205BITMAP . . . . . . . . .	 00000010
  dwWidth  . . . . . . . . . . .	 00000000	 DWord
  dwHeight . . . . . . . . . . .	 00000004	 DWord
  bTransparent . . . . . . . . .	 00000008	 Byte
  lpBytes  . . . . . . . . . . .	 0000000C	 DWord


Types:

                N a m e                  Size     Attr

EECS205BITMAP  . . . . . . . . .	 00000010     _EECS205BITMAP 
FIXED  . . . . . . . . . . . . .	 00000004     DWord 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000186 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BasicBlit  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001D Public STDCALL
  lpBmp  . . . . . . . . . . . .	DWord	 bp + 00000008
  xcenter  . . . . . . . . . . .	DWord	 bp + 0000000C
  ycenter  . . . . . . . . . . .	DWord	 bp + 00000010
BlitReg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FixedCos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FixedSin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RotateBlit . . . . . . . . . . .	P Near	 0000001D _TEXT	Length= 00000169 Public STDCALL
  lpBmp  . . . . . . . . . . . .	DWord	 bp + 00000008
  xcenter  . . . . . . . . . . .	DWord	 bp + 0000000C
  ycenter  . . . . . . . . . . .	DWord	 bp + 00000010
  angle  . . . . . . . . . . . .	DWord	 bp + 00000014
  sina . . . . . . . . . . . . .	DWord	 bp - 00000004
  cosa . . . . . . . . . . . . .	DWord	 bp - 00000008
  shiftX . . . . . . . . . . . .	DWord	 bp - 0000000C
  shiftY . . . . . . . . . . . .	DWord	 bp - 00000010
  dstWidth . . . . . . . . . . .	DWord	 bp - 00000014
  dstHeight  . . . . . . . . . .	DWord	 bp - 00000018
  dstX . . . . . . . . . . . . .	DWord	 bp - 0000001C
  dstY . . . . . . . . . . . . .	DWord	 bp - 00000020
  srcX . . . . . . . . . . . . .	DWord	 bp - 00000024
  srcY . . . . . . . . . . . . .	DWord	 bp - 00000028
  writeCoordX  . . . . . . . . .	DWord	 bp - 0000002C
  writeCoordY  . . . . . . . . .	DWord	 bp - 00000030
  bitmapval  . . . . . . . . . .	Byte	 bp - 00000031
  XLoop  . . . . . . . . . . . .	L Near	 000000A5 _TEXT	
  YLoop  . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
  skip . . . . . . . . . . . . .	L Near	 00000162 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
SINTAB . . . . . . . . . . . . .	Word	 00000000 FLAT	External STDCALL
StarBitmap . . . . . . . . . . .	_EECS205BITMAP  00000000 FLAT	External STDCALL
dwPitch  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
lpDisplayBits  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL

	   0 Warnings
	   0 Errors
